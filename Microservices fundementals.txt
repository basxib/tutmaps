Microservices Fundementals      
	Design steps
		1. Investigate architecture
		2. Determine domains
		3. Break services
		4. Detect Atomic domains.
		5. Design an API layer
			API types
				Outbound edge services (offers)
				Inbound/abstraction services 
					when interacting with 3rd parties.                                                         
			Endpoints are just a proxy                                   
				no data transformation
				no business logic.
		6. Design a unified logging strategy.
				use tracing tokens.                
			
	Design Drivers
		Separation of concerns
		avoid distribution taxes
			tie related services
		Design for Ci/CD
		Leverage domain driven design.
		build using async code. 
		Standardize stack where possible.
		Elastic
			each service should be able to grow/shrink independent of other services.
		Isolation of failure
		loose coupling
			no service should call another
			S uses Queues to communicate
	Best practices
		No central DB
		Use correlation ID
			for Txes across different services.
		Dedicate a Roll-back service.
		Create a transaction manager service
			tells other services when its time for rollback.
		
		
		
		
	Hybrid Architectures
		Hierarchical service architecture
			Prevents circular dependencies.
		Service Based Architecture
			Unified Data store
			Services layer.